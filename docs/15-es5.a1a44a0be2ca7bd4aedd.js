(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"scA/":function(c,e,t){"use strict";t.r(e);var i,n,o=t("ofXK"),a=t("fXoL"),s=t("qTCB"),d=t("8Sym"),p=t("tyNb"),r=t("f+iR"),u=t("q6TO"),l=t("OeOG"),f=[3,"sources"],h=[{path:r.c,component:(i=function(){function c(){this.idServiceSources=[{service:"id",active:!0},{id:"idServiceConstTs"}],this.noteSources=[{singleComponent:"note",active:!0},{template:"note"}],this.inputCode="@Input() id: string;",this.injectionCode="constructor(private readonly idService: IdService) {}",this.initializationCode="ngOnInit() {\n  this.id = this.id || this.idService.nextId();\n}",this.templateCode='<div class="card {{ type }} mb-3" id="{{ id }}"></div>',this.customIdCode="<app-note [id]=\"'customId'\">Follow the KISS rule!</app-note>"}return c.prototype.ngOnInit=function(){},c}(),i.ngFactoryDef=function(c){return new(c||i)},i.ngComponentDef=a.Sb({type:i,selectors:[["app-utilities-id"]],consts:42,vars:7,template:function(c,e){1&c&&(a.cc(0,"h4"),a.Fc(1,"Id service"),a.ac(),a.cc(2,"p"),a.Fc(3," I prefer to add an id to all components which can appear more than once in a single view.\n"),a.ac(),a.cc(4,"p"),a.Fc(5," Assigning ids makes it easier to debug the project.\n"),a.ac(),a.cc(6,"p"),a.Fc(7," But adding ids manually takes time and tons of imagination.\n"),a.ac(),a.cc(8,"p"),a.Fc(9," To simplify such a routine task, I'm using the next solution:\n"),a.ac(),a.Zb(10,"app-source-viewer",f),a.cc(11,"h5"),a.Fc(12,"Implementation"),a.ac(),a.cc(13,"p"),a.Fc(14,"Here is an example:"),a.ac(),a.Zb(15,"app-source-viewer",f),a.cc(16,"p"),a.Fc(17," The implementation is quite easy.\n"),a.ac(),a.cc(18,"p"),a.Fc(19," First of all, a component has an input field named id of type string.\n"),a.ac(),a.cc(20,"app-code"),a.Fc(21),a.ac(),a.cc(22,"p"),a.Fc(23," After that, you need to inject a service into the constructor:\n"),a.ac(),a.cc(24,"app-code"),a.Fc(25),a.ac(),a.cc(26,"p"),a.Fc(27," Check the id during the initialization:\n"),a.ac(),a.cc(28,"app-code"),a.Fc(29),a.ac(),a.cc(30,"p"),a.Fc(31," Lastly, assign an id to a top-level tag of the template:\n"),a.ac(),a.cc(32,"app-code"),a.Fc(33),a.ac(),a.cc(34,"p"),a.Fc(35,"Also, this approach allows defining a custom id in a template:"),a.ac(),a.cc(36,"app-code"),a.Fc(37),a.ac(),a.cc(38,"h5"),a.Fc(39,"Conclusion"),a.ac(),a.cc(40,"p"),a.Fc(41," Ids allow you debug your code and layout. Automatically generated ids are a good solution. Having an ability to define custom id adds flexibility to this solution.\n"),a.ac()),2&c&&(a.xc(10),a.nc("sources",e.idServiceSources),a.xc(15),a.nc("sources",e.noteSources),a.xc(21),a.Gc(e.inputCode),a.xc(25),a.Gc(e.injectionCode),a.xc(29),a.Gc(e.initializationCode),a.xc(33),a.Gc(e.templateCode),a.xc(37),a.Gc(e.customIdCode))},directives:[u.a,l.a],styles:[""]}),i)}],m=((n=function(){}).ngModuleDef=a.Wb({type:n}),n.ngInjectorDef=a.Vb({factory:function(c){return new(c||n)},imports:[[p.f.forChild(h)],p.f]}),n);p.f.forChild(h),t.d(e,"UtilitiesIdModule",function(){return y});var g,y=((g=function(){}).ngModuleDef=a.Wb({type:g}),g.ngInjectorDef=a.Vb({factory:function(c){return new(c||g)},imports:[[o.b,m,d.a,s.a]]}),g)}}]);