(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"scA/":function(c,e,t){"use strict";t.r(e);var i=t("ofXK"),n=t("fXoL"),o=t("qTCB"),a=t("8Sym"),s=t("tyNb"),d=t("f+iR"),r=t("q6TO"),p=t("OeOG");const l=[3,"sources"],u=[{path:d.c,component:(()=>{class c{constructor(){this.idServiceSources=[{service:"id",active:!0},{id:"idServiceConstTs"}],this.noteSources=[{singleComponent:"note",active:!0},{template:"note"}],this.inputCode="@Input() id: string;",this.injectionCode="constructor(private readonly idService: IdService) {}",this.initializationCode="ngOnInit() {\n  this.id = this.id || this.idService.nextId();\n}",this.templateCode='<div class="card {{ type }} mb-3" id="{{ id }}"></div>',this.customIdCode="<app-note [id]=\"'customId'\">Follow the KISS rule!</app-note>"}ngOnInit(){}}return c.ngFactoryDef=function(e){return new(e||c)},c.ngComponentDef=n.Sb({type:c,selectors:[["app-utilities-id"]],consts:42,vars:7,template:function(c,e){1&c&&(n.cc(0,"h4"),n.Fc(1,"Id service"),n.ac(),n.cc(2,"p"),n.Fc(3," I prefer to add an id to all components which can appear more than once in a single view.\n"),n.ac(),n.cc(4,"p"),n.Fc(5," Assigning ids makes it easier to debug the project.\n"),n.ac(),n.cc(6,"p"),n.Fc(7," But adding ids manually takes time and tons of imagination.\n"),n.ac(),n.cc(8,"p"),n.Fc(9," To simplify such a routine task, I'm using the next solution:\n"),n.ac(),n.Zb(10,"app-source-viewer",l),n.cc(11,"h5"),n.Fc(12,"Implementation"),n.ac(),n.cc(13,"p"),n.Fc(14,"Here is an example:"),n.ac(),n.Zb(15,"app-source-viewer",l),n.cc(16,"p"),n.Fc(17," The implementation is quite easy.\n"),n.ac(),n.cc(18,"p"),n.Fc(19," First of all, a component has an input field named id of type string.\n"),n.ac(),n.cc(20,"app-code"),n.Fc(21),n.ac(),n.cc(22,"p"),n.Fc(23," After that, you need to inject a service into the constructor:\n"),n.ac(),n.cc(24,"app-code"),n.Fc(25),n.ac(),n.cc(26,"p"),n.Fc(27," Check the id during the initialization:\n"),n.ac(),n.cc(28,"app-code"),n.Fc(29),n.ac(),n.cc(30,"p"),n.Fc(31," Lastly, assign an id to a top-level tag of the template:\n"),n.ac(),n.cc(32,"app-code"),n.Fc(33),n.ac(),n.cc(34,"p"),n.Fc(35,"Also, this approach allows defining a custom id in a template:"),n.ac(),n.cc(36,"app-code"),n.Fc(37),n.ac(),n.cc(38,"h5"),n.Fc(39,"Conclusion"),n.ac(),n.cc(40,"p"),n.Fc(41," Ids allow you debug your code and layout. Automatically generated ids are a good solution. Having an ability to define custom id adds flexibility to this solution.\n"),n.ac()),2&c&&(n.xc(10),n.nc("sources",e.idServiceSources),n.xc(15),n.nc("sources",e.noteSources),n.xc(21),n.Gc(e.inputCode),n.xc(25),n.Gc(e.injectionCode),n.xc(29),n.Gc(e.initializationCode),n.xc(33),n.Gc(e.templateCode),n.xc(37),n.Gc(e.customIdCode))},directives:[r.a,p.a],styles:[""]}),c})()}];let h=(()=>{class c{}return c.ngModuleDef=n.Wb({type:c}),c.ngInjectorDef=n.Vb({factory:function(e){return new(e||c)},imports:[[s.f.forChild(u)],s.f]}),c})();s.f.forChild(u),t.d(e,"UtilitiesIdModule",function(){return m});let m=(()=>{class c{}return c.ngModuleDef=n.Wb({type:c}),c.ngInjectorDef=n.Vb({factory:function(e){return new(e||c)},imports:[[i.b,h,a.a,o.a]]}),c})()}}]);